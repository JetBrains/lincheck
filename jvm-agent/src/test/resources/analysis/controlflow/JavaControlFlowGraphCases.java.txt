/*
 * Lincheck
 *
 * Copyright (C) 2019 - 2025 JetBrains s.r.o.
 *
 * This Source Code Form is subject to the terms of the
 * Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed
 * with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

// Test cases for control-flow graph construction from Java bytecode.
// One public class with multiple static methods, each representing a CFG scenario.

public class JavaControlFlowGraphCases {

    // 1. Straight-line code (no branches).
    public static int straightLine() {
        int x = 0;
        x++;
        return x;
    }

    // 2. If statement.
    public static int ifStmt(int x) {
        if (x > 0) {
            return 1;
        }
        x--;
        return -x;
    }

    // 3a. If/else statement: numeric comparison.
    public static int ifElseNum(int x) {
        if (x > 0) {
            return 1;
        } else {
            return 2;
        }
    }

    // 3b. If/else statement: null checks.
    public static int ifNull(Object o) {
        if (o == null) {
            return 0;
        } else {
            return 1;
        }
    }

    // 3c. If/else statement: object reference comparisons.
    public static int ifRefCompare(Object a, Object b) {
        if (a == b) {
            return 1;
        } else {
            return 2;
        }
    }

    // 4. Nested conditionals.
    public static int ifElseNested(int a, int b) {
        if (a > 0) {
            if (b < 0) {
                return 1;
            } else {
                return 2;
            }
        } else {
            return 3;
        }
    }

    // 5a. While loop.
    public static int whileLoop(int n) {
        int s = 0;
        while (n-- > 0) {
            s += n;
        }
        return s;
    }

    // 5b. While loop with continue.
    public static int whileLoopContinue(int n) {
        int s = 0;
        while (n-- > 0) {
            if ((n & 1) == 0) continue;
            s += n;
        }
        return s;
    }

    // 5c. While loop with break.
    public static int whileLoopBreak(int n) {
        int s = 0;
        while (n-- > 0) {
            if ((n % 7) == 0) break;
            s += n;
        }
        return s;
    }

    // 6. Do while.
    public static int doWhileLoop(int n) {
        int i = 0;
        int c = 0;
        do {
            i++;
            c += i;
        } while (i < n);
        return c;
    }

    // 7a. For-loop.
    public static int forLoop(int n) {
        int s = 0;
        for (int i = 0; i < n; i++) {
            if (i == 1) continue;
            if (i == 3) break;
            s += i;
        }
        return s;
    }

    // 7b. For-loop with continue/break.
    public static int forLoopContinueBreak(int n) {
        int s = 0;
        for (int i = 0; i < n; i++) {
            if (i == 1) continue;
            if (i == 7) break;
            s += i;
        }
        return s;
    }
}
