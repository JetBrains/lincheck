/*
 * #%L
 * Lincheck
 * %%
 * Copyright (C) 2015 - 2018 Devexperts, LLC
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Lesser Public License for more details.
 *
 * You should have received a copy of the GNU General Lesser Public
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/lgpl-3.0.html>.
 * #L%
 */
package org.jetbrains.kotlinx.lincheck.execution

import org.jetbrains.kotlinx.lincheck.Actor
import org.jetbrains.kotlinx.lincheck.appendExecutionScenario

/**
 * This class represents an execution scenario, which
 * is generated by an {@link ExecutionGenerator} and then \
 * used by a {@link Strategy} which produces an {@link ExecutionResult}.
 */
data class ExecutionScenario(
    /**
     * The initial sequential part of the execution.
     * It helps to produce different initial states
     * before the parallel part.
     *
     * The initial execution part should contain only non-suspendable actors;
     * otherwise, the single initial execution thread will suspend with no chance to be resumed.
     */
    val initExecution: List<Actor>,
    /**
     * The parallel part of the execution, which is used
     * to find an interleaving with incorrect behaviour.
     */
    val parallelExecution: List<List<Actor>>,
    /**
     * The last sequential part is used to test that
     * the data structure is in some correct state.
     *
     * If this execution scenario contains suspendable actors, the post part should be empty;
     * if not, an actor could resume a previously suspended one from the parallel execution part.
     */
    val postExecution: List<Actor>
) {

    /**
     * Returns the number of threads used in the parallel part of this execution.
     */
    val threads get() = parallelExecution.size

    /**
     * Returns `true` if there is at least one suspendable actor in the generated scenario
     */
    fun hasSuspendableActors() = parallelExecution.asSequence().flatten().plus(postExecution).any(Actor::isSuspendable)

    operator fun get(threadId: Int): List<Actor> = when (threadId) {
        0 -> initExecution
        in 1..threads -> parallelExecution[threadId - 1]
        threads + 1 -> postExecution
        else -> throw IllegalArgumentException("Thread is is out of bounds: $threadId")
    }


    override fun toString() = StringBuilder()
        .also { it.appendExecutionScenario(this) }
        .toString()

    /**
     * Copy the [ExecutionScenario] with the [actorId] actor of the [threadId] thread removed.
     */
    fun copyWithRemovedActor(threadId: Int, actorId: Int): ExecutionScenario = when (threadId) {
        0 -> copy(initExecution = initExecution.removeAt(actorId))
        in 1..threads -> {
            val thread = parallelExecution[threadId - 1]
            if (thread.size > 1) {
                copy(parallelExecution = parallelExecution.mapIndexed { id, actors -> if (id == threadId - 1) actors.removeAt(actorId) else actors })
            } else {
                copy(
                    parallelExecution = parallelExecution
                        .removeAt(threadId - 1)
                        .mapIndexed { id, actors -> actors.copyWithThreadId(id + 1) },
                    postExecution = postExecution.copyWithThreadId(threads)
                )
            }
        }
        threads + 1 -> copy(postExecution = postExecution.removeAt(actorId))
        else -> error("Thread id is out of bounds 0..${threads}: $threadId")
    }
}

/**
 * Create a copy of the list without the [index] element.
 */
private fun <T> List<T>.removeAt(index: Int) = filterIndexed { i, _ -> i != index }

/**
 * Copy actors list with [threadId] set as thread id.
 */
private fun List<Actor>.copyWithThreadId(threadId: Int) = map { actor -> actor.copyWithThreadId(threadId) }
