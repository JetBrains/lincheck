= Invalid execution results =
| -------------------------------------- |
|                Thread 1                |
| -------------------------------------- |
| run(() -> R): IllegalStateException #1 |
| -------------------------------------- |

---
The number next to an exception name helps you find its stack trace provided after the interleaving section
---

The following interleaving leads to the error:
| -------------------------------------- |
|                Thread 1                |
| -------------------------------------- |
| run(() -> R): IllegalStateException #1 |
| -------------------------------------- |

Exception stack traces:
#1: java.lang.IllegalStateException: Check failed.
	at org.jetbrains.kotlinx.lincheck_test.representation.AtomicReferencesNamesRunWithLambdaTests.block(Unknown Source)
	at org.jetbrains.kotlinx.lincheck_test.representation.AtomicReferencesNamesRunWithLambdaTests.block(Unknown Source)
	at org.jetbrains.kotlinx.lincheck_test.representation.BaseRunWithLambdaRepresentationTest$testRunWithModelChecker$failure$1.invoke(Unknown Source)
	at java.base/java.lang.Thread.run(Thread.java:833)

Detailed trace:
| -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
|                                                                                                 Thread 1                                                                                                 |
| -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| run(() -> R): IllegalStateException #1                                                                                                                                                                   |
|   AtomicReferencesNamesRunWithLambdaTests#1.block(): threw IllegalStateException at BaseRunWithLambdaRepresentationTest$testRunWithModelChecker$failure$1.invoke(RunWithLambdaRepresentationTests.kt:41) |
|     block(): threw IllegalStateException at AtomicReferencesNamesRunWithLambdaTests.block(RunWithLambdaRepresentationTests.kt:60)                                                                        |
|       AtomicReference#1.get(): Node#1 at AtomicReferencesNamesRunWithLambdaTests.block(RunWithLambdaRepresentationTests.kt:74)                                                                           |
|       AtomicReference#1.compareAndSet(Node#1,Node#2): true at AtomicReferencesNamesRunWithLambdaTests.block(RunWithLambdaRepresentationTests.kt:74)                                                      |
|       AtomicReference#1.set(Node#3) at AtomicReferencesNamesRunWithLambdaTests.block(RunWithLambdaRepresentationTests.kt:75)                                                                             |
|       AtomicInteger#1.get(): 0 at AtomicReferencesNamesRunWithLambdaTests.block(RunWithLambdaRepresentationTests.kt:77)                                                                                  |
|       AtomicInteger#1.compareAndSet(0,2): true at AtomicReferencesNamesRunWithLambdaTests.block(RunWithLambdaRepresentationTests.kt:77)                                                                  |
|       AtomicInteger#1.set(3) at AtomicReferencesNamesRunWithLambdaTests.block(RunWithLambdaRepresentationTests.kt:78)                                                                                    |
|       AtomicLong#1.get(): 0 at AtomicReferencesNamesRunWithLambdaTests.block(RunWithLambdaRepresentationTests.kt:80)                                                                                     |
|       AtomicLong#1.compareAndSet(0,2): true at AtomicReferencesNamesRunWithLambdaTests.block(RunWithLambdaRepresentationTests.kt:80)                                                                     |
|       AtomicLong#1.set(3) at AtomicReferencesNamesRunWithLambdaTests.block(RunWithLambdaRepresentationTests.kt:81)                                                                                       |
|       AtomicBoolean#1.get(): true at AtomicReferencesNamesRunWithLambdaTests.block(RunWithLambdaRepresentationTests.kt:83)                                                                               |
|       AtomicBoolean#1.compareAndSet(true,true): true at AtomicReferencesNamesRunWithLambdaTests.block(RunWithLambdaRepresentationTests.kt:83)                                                            |
|       AtomicBoolean#1.set(false) at AtomicReferencesNamesRunWithLambdaTests.block(RunWithLambdaRepresentationTests.kt:84)                                                                                |
|       AtomicReferenceArray#1[0].get(): Node#4 at AtomicReferencesNamesRunWithLambdaTests.block(RunWithLambdaRepresentationTests.kt:86)                                                                   |
|       AtomicReferenceArray#1[0].compareAndSet(Node#4,Node#5): true at AtomicReferencesNamesRunWithLambdaTests.block(RunWithLambdaRepresentationTests.kt:86)                                              |
|       AtomicReferenceArray#1[0].set(Node#6) at AtomicReferencesNamesRunWithLambdaTests.block(RunWithLambdaRepresentationTests.kt:87)                                                                     |
|       AtomicIntegerArray#1[0].get(): 0 at AtomicReferencesNamesRunWithLambdaTests.block(RunWithLambdaRepresentationTests.kt:89)                                                                          |
|       AtomicIntegerArray#1[0].compareAndSet(0,1): true at AtomicReferencesNamesRunWithLambdaTests.block(RunWithLambdaRepresentationTests.kt:89)                                                          |
|       AtomicIntegerArray#1[0].set(2) at AtomicReferencesNamesRunWithLambdaTests.block(RunWithLambdaRepresentationTests.kt:90)                                                                            |
|       AtomicLongArray#1[0].get(): 0 at AtomicReferencesNamesRunWithLambdaTests.block(RunWithLambdaRepresentationTests.kt:92)                                                                             |
|       AtomicLongArray#1[0].compareAndSet(0,1): true at AtomicReferencesNamesRunWithLambdaTests.block(RunWithLambdaRepresentationTests.kt:92)                                                             |
|       AtomicLongArray#1[0].set(2) at AtomicReferencesNamesRunWithLambdaTests.block(RunWithLambdaRepresentationTests.kt:93)                                                                               |
|       AtomicReference#2.set(Node#7) at AtomicReferencesNamesRunWithLambdaTests.block(RunWithLambdaRepresentationTests.kt:95)                                                                             |
|       AtomicIntegerArray#2[0].compareAndSet(1,2): false at AtomicReferencesNamesRunWithLambdaTests.block(RunWithLambdaRepresentationTests.kt:96)                                                         |
|       AtomicInteger#2.compareAndSet(0,2): true at AtomicReferencesNamesRunWithLambdaTests.block(RunWithLambdaRepresentationTests.kt:98)                                                                  |
|       AtomicInteger#2.set(0) at AtomicReferencesNamesRunWithLambdaTests.block(RunWithLambdaRepresentationTests.kt:99)                                                                                    |
|       AtomicInteger#3.compareAndSet(1,2): true at AtomicReferencesNamesRunWithLambdaTests.block(RunWithLambdaRepresentationTests.kt:101)                                                                 |
|       AtomicInteger#3.set(3) at AtomicReferencesNamesRunWithLambdaTests.block(RunWithLambdaRepresentationTests.kt:102)                                                                                   |
|       AtomicIntegerArray#3[1].compareAndSet(0,1): true at AtomicReferencesNamesRunWithLambdaTests.block(RunWithLambdaRepresentationTests.kt:104)                                                         |
|       AtomicIntegerArray#4[1].compareAndSet(0,1): true at AtomicReferencesNamesRunWithLambdaTests.block(RunWithLambdaRepresentationTests.kt:105)                                                         |
|   result: IllegalStateException #1                                                                                                                                                                       |
| -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
