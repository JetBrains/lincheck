= Validation function validateWithError has failed =
| -------- |
| Thread 1 |
| -------- |
| inc()    |
| inc()    |
| inc()    |
| -------- |
| inc()    |
| -------- |
| inc()    |
| -------- |


java.lang.IllegalStateException: Validation works!
	at org.jetbrains.kotlinx.lincheck_test.representation.ValidateFunctionTest.validateWithError(ValidateFunctionTest.kt:39)


The following interleaving leads to the error:
| -------- |
| Thread 1 |
| -------- |
| inc()    |
| inc()    |
| inc()    |
| inc()    |
| inc()    |
| -------- |

Detailed trace:
| ------------------------------------------------------------------------------------------------ |
|                                             Thread 1                                             |
| ------------------------------------------------------------------------------------------------ |
| inc()                                                                                            |
|   incrementAndGet(): 1 at ValidateFunctionTest.inc(ValidateFunctionTest.kt:25)                   |
|   validateInvoked.READ: 0 at ValidateFunctionTest.validateWithError(ValidateFunctionTest.kt:38)  |
|   validateInvoked.WRITE(1) at ValidateFunctionTest.validateWithError(ValidateFunctionTest.kt:38) |
|   validateInvoked.READ: 1 at ValidateFunctionTest.validateWithError(ValidateFunctionTest.kt:39)  |
| inc()                                                                                            |
|   incrementAndGet(): 2 at ValidateFunctionTest.inc(ValidateFunctionTest.kt:25)                   |
|   validateInvoked.READ: 1 at ValidateFunctionTest.validateWithError(ValidateFunctionTest.kt:38)  |
|   validateInvoked.WRITE(2) at ValidateFunctionTest.validateWithError(ValidateFunctionTest.kt:38) |
|   validateInvoked.READ: 2 at ValidateFunctionTest.validateWithError(ValidateFunctionTest.kt:39)  |
| inc()                                                                                            |
|   incrementAndGet(): 3 at ValidateFunctionTest.inc(ValidateFunctionTest.kt:25)                   |
|   validateInvoked.READ: 2 at ValidateFunctionTest.validateWithError(ValidateFunctionTest.kt:38)  |
|   validateInvoked.WRITE(3) at ValidateFunctionTest.validateWithError(ValidateFunctionTest.kt:38) |
|   validateInvoked.READ: 3 at ValidateFunctionTest.validateWithError(ValidateFunctionTest.kt:39)  |
| inc()                                                                                            |
|   incrementAndGet(): 4 at ValidateFunctionTest.inc(ValidateFunctionTest.kt:25)                   |
|   validateInvoked.READ: 3 at ValidateFunctionTest.validateWithError(ValidateFunctionTest.kt:38)  |
|   validateInvoked.WRITE(4) at ValidateFunctionTest.validateWithError(ValidateFunctionTest.kt:38) |
|   validateInvoked.READ: 4 at ValidateFunctionTest.validateWithError(ValidateFunctionTest.kt:39)  |
| inc()                                                                                            |
|   incrementAndGet(): 5 at ValidateFunctionTest.inc(ValidateFunctionTest.kt:25)                   |
|   validateInvoked.READ: 4 at ValidateFunctionTest.validateWithError(ValidateFunctionTest.kt:38)  |
|   validateInvoked.WRITE(5) at ValidateFunctionTest.validateWithError(ValidateFunctionTest.kt:38) |
|   validateInvoked.READ: 5 at ValidateFunctionTest.validateWithError(ValidateFunctionTest.kt:39)  |
| ------------------------------------------------------------------------------------------------ |


= To reproduce exactly this test execution with the same scenarios, you can add this setting in your testing options configuration =
.withReproduceSettings("eyJyYW5kb21TZWVkR2VuZXJhdG9yU2VlZCI6LTQ1NjkxMTY2MzQ1OTkxNDk3ODR9")

= You can add this scenario as a custom test. Insert this code in your testing options configuration =
.addCustomScenario {
	initial {
		actor(::inc)
		actor(::inc)
		actor(::inc)
	}
	parallel {
		thread {
			actor(::inc)
		}
	}
	post {
		actor(::inc)
	}
}
