= Concurrent test has hung =

The following interleaving leads to the error:
| -------------------------------------------------------------------------------------------------------------------------------------------------- |
|                                                                    Main Thread                                                                     |
| -------------------------------------------------------------------------------------------------------------------------------------------------- |
| $this_runCatching.block() at BaseRunConcurrentRepresentationTest.testRunWithModelChecker$lambda$1$lambda$0(RunConcurrentRepresentationTests.kt:47) |
|   block() at MainThreadBlockedRunConcurrentRepresentationTest.block(RunConcurrentRepresentationTests.kt:96)                                        |
|     q.take() at MainThreadBlockedRunConcurrentRepresentationTest.block(RunConcurrentRepresentationTests.kt:101)                                    |
|       lock.lockInterruptibly() at ArrayBlockingQueue.take(ArrayBlockingQueue.java:417)                                                             |
|       count ➜ 0 at ArrayBlockingQueue.take(ArrayBlockingQueue.java:419)                                                                            |
|       notEmpty.await() at ArrayBlockingQueue.take(ArrayBlockingQueue.java:420)                                                                     |
|         newConditionNode(): ConditionNode#1 at AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1697)              |
|         enableWait(ConditionNode#1): 1 at AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1700)                   |
|         LockSupport.setCurrentBlocker(ConditionObject#1) at AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1701) |
|         canReacquire(ConditionNode#1): false at AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1703)             |
|         node.status ➜ 3 at AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1707)                                  |
|         ForkJoinPool.managedBlock(ConditionNode#1) at AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1712)       |
|           ForkJoinPool.unmanagedBlock(ConditionNode#1) at ForkJoinPool.managedBlock(ForkJoinPool.java:3725)                                        |
|             blocker.isReleasable(): false at ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3780)                                                   |
|             blocker.block() at ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3780)                                                                 |
|               isReleasable(): false at AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:519)                         |
|               LockSupport.park() at AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:519)                            |
|                 PARK at LockSupport.park(LockSupport.java:371)                                                                                     |
| -------------------------------------------------------------------------------------------------------------------------------------------------- |
All unfinished threads are in deadlock

Detailed trace:
| -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
|                                                                                   Main Thread                                                                                    |
| -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| $this_runCatching.block() at BaseRunConcurrentRepresentationTest.testRunWithModelChecker$lambda$1$lambda$0(RunConcurrentRepresentationTests.kt:47)                               |
|   block() at MainThreadBlockedRunConcurrentRepresentationTest.block(RunConcurrentRepresentationTests.kt:96)                                                                      |
|     q.take() at MainThreadBlockedRunConcurrentRepresentationTest.block(RunConcurrentRepresentationTests.kt:101)                                                                  |
|       lock.lockInterruptibly() at ArrayBlockingQueue.take(ArrayBlockingQueue.java:417)                                                                                           |
|         sync.lockInterruptibly() at ReentrantLock.lockInterruptibly(ReentrantLock.java:372)                                                                                      |
|           initialTryLock(): true at ReentrantLock$Sync.lockInterruptibly(ReentrantLock.java:160)                                                                                 |
|             compareAndSetState(0, 1): true at ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:225)                                                                   |
|               Unsafe#1.compareAndSetInt(NonfairSync#1, 16, 0, 1): true at AbstractQueuedSynchronizer.compareAndSetState(AbstractQueuedSynchronizer.java:569)                     |
|             setExclusiveOwnerThread(Thread#0) at ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:226)                                                                |
|               exclusiveOwnerThread = Thread#0 at AbstractOwnableSynchronizer.setExclusiveOwnerThread(AbstractOwnableSynchronizer.java:74)                                        |
|       count ➜ 0 at ArrayBlockingQueue.take(ArrayBlockingQueue.java:419)                                                                                                          |
|       notEmpty.await() at ArrayBlockingQueue.take(ArrayBlockingQueue.java:420)                                                                                                   |
|         newConditionNode(): ConditionNode#1 at AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1697)                                            |
|           this$0.tryInitializeHead(): ExclusiveNode#1 at AbstractQueuedSynchronizer$ConditionObject.newConditionNode(AbstractQueuedSynchronizer.java:1625)                       |
|             tail ➜ null at AbstractQueuedSynchronizer.tryInitializeHead(AbstractQueuedSynchronizer.java:584)                                                                     |
|             head ➜ null at AbstractQueuedSynchronizer.tryInitializeHead(AbstractQueuedSynchronizer.java:586)                                                                     |
|             Unsafe#1.compareAndSetReference(NonfairSync#1, 20, null, ExclusiveNode#1): true at AbstractQueuedSynchronizer.tryInitializeHead(AbstractQueuedSynchronizer.java:596) |
|             tail = ExclusiveNode#1 at AbstractQueuedSynchronizer.tryInitializeHead(AbstractQueuedSynchronizer.java:597)                                                          |
|         enableWait(ConditionNode#1): 1 at AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1700)                                                 |
|           this$0.isHeldExclusively(): true at AbstractQueuedSynchronizer$ConditionObject.enableWait(AbstractQueuedSynchronizer.java:1565)                                        |
|             getExclusiveOwnerThread(): Thread#0 at ReentrantLock$Sync.isHeldExclusively(ReentrantLock.java:186)                                                                  |
|               exclusiveOwnerThread ➜ Thread#0 at AbstractOwnableSynchronizer.getExclusiveOwnerThread(AbstractOwnableSynchronizer.java:84)                                        |
|           node.waiter = Thread#0 at AbstractQueuedSynchronizer$ConditionObject.enableWait(AbstractQueuedSynchronizer.java:1566)                                                  |
|           node.setStatusRelaxed(3) at AbstractQueuedSynchronizer$ConditionObject.enableWait(AbstractQueuedSynchronizer.java:1567)                                                |
|             Unsafe#1.putInt(ConditionNode#1, 12, 3) at AbstractQueuedSynchronizer$Node.setStatusRelaxed(AbstractQueuedSynchronizer.java:487)                                     |
|           lastWaiter ➜ null at AbstractQueuedSynchronizer$ConditionObject.enableWait(AbstractQueuedSynchronizer.java:1568)                                                       |
|           firstWaiter = ConditionNode#1 at AbstractQueuedSynchronizer$ConditionObject.enableWait(AbstractQueuedSynchronizer.java:1570)                                           |
|           lastWaiter = ConditionNode#1 at AbstractQueuedSynchronizer$ConditionObject.enableWait(AbstractQueuedSynchronizer.java:1573)                                            |
|           this$0.getState(): 1 at AbstractQueuedSynchronizer$ConditionObject.enableWait(AbstractQueuedSynchronizer.java:1574)                                                    |
|             state ➜ 1 at AbstractQueuedSynchronizer.getState(AbstractQueuedSynchronizer.java:545)                                                                                |
|           this$0.release(1): true at AbstractQueuedSynchronizer$ConditionObject.enableWait(AbstractQueuedSynchronizer.java:1575)                                                 |
|             tryRelease(1): true at AbstractQueuedSynchronizer.release(AbstractQueuedSynchronizer.java:1059)                                                                      |
|               getState(): 1 at ReentrantLock$Sync.tryRelease(ReentrantLock.java:173)                                                                                             |
|                 state ➜ 1 at AbstractQueuedSynchronizer.getState(AbstractQueuedSynchronizer.java:545)                                                                            |
|               getExclusiveOwnerThread(): Thread#0 at ReentrantLock$Sync.tryRelease(ReentrantLock.java:174)                                                                       |
|                 exclusiveOwnerThread ➜ Thread#0 at AbstractOwnableSynchronizer.getExclusiveOwnerThread(AbstractOwnableSynchronizer.java:84)                                      |
|               setExclusiveOwnerThread(null) at ReentrantLock$Sync.tryRelease(ReentrantLock.java:178)                                                                             |
|                 exclusiveOwnerThread = null at AbstractOwnableSynchronizer.setExclusiveOwnerThread(AbstractOwnableSynchronizer.java:74)                                          |
|               setState(0) at ReentrantLock$Sync.tryRelease(ReentrantLock.java:179)                                                                                               |
|                 state = 0 at AbstractQueuedSynchronizer.setState(AbstractQueuedSynchronizer.java:554)                                                                            |
|             head ➜ ExclusiveNode#1 at AbstractQueuedSynchronizer.release(AbstractQueuedSynchronizer.java:1060)                                                                   |
|             AbstractQueuedSynchronizer.signalNext(ExclusiveNode#1) at AbstractQueuedSynchronizer.release(AbstractQueuedSynchronizer.java:1060)                                   |
|               h.next ➜ null at AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer.java:643)                                                                        |
|         LockSupport.setCurrentBlocker(ConditionObject#1) at AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1701)                               |
|           Unsafe#1.putReferenceOpaque(Thread#0, 92, ConditionObject#1) at LockSupport.setCurrentBlocker(LockSupport.java:162)                                                    |
|         canReacquire(ConditionNode#1): false at AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1703)                                           |
|           node.prev ➜ null at AbstractQueuedSynchronizer$ConditionObject.canReacquire(AbstractQueuedSynchronizer.java:1591)                                                      |
|         node.status ➜ 3 at AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1707)                                                                |
|         ForkJoinPool.managedBlock(ConditionNode#1) at AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1712)                                     |
|           ForkJoinPool.unmanagedBlock(ConditionNode#1) at ForkJoinPool.managedBlock(ForkJoinPool.java:3725)                                                                      |
|             blocker.isReleasable(): false at ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3780)                                                                                 |
|               status ➜ 3 at AbstractQueuedSynchronizer$ConditionNode.isReleasable(AbstractQueuedSynchronizer.java:515)                                                           |
|             blocker.block() at ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3780)                                                                                               |
|               isReleasable(): false at AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:519)                                                       |
|                 status ➜ 3 at AbstractQueuedSynchronizer$ConditionNode.isReleasable(AbstractQueuedSynchronizer.java:515)                                                         |
|               LockSupport.park() at AbstractQueuedSynchronizer$ConditionNode.block(AbstractQueuedSynchronizer.java:519)                                                          |
|                 PARK at LockSupport.park(LockSupport.java:371)                                                                                                                   |
| -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
All unfinished threads are in deadlock
